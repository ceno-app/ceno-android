/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply plugin: 'androidx.navigation.safeargs'
apply from: "$project.rootDir/automation/gradle/versionCode.gradle"

import com.android.build.gradle.internal.tasks.AppPreBuildTask
import com.android.build.OutputFile
import org.yaml.snakeyaml.Yaml

Properties localProperties = new Properties()
localProperties.load(rootProject.file('local.properties').newDataInputStream())

def scenarioFile = new File(project.hasProperty("testConfig") ? project.getProperty("testConfig") : "scenario.yaml")
def scenarioYaml = scenarioFile.exists() ? new Yaml().load(scenarioFile.newInputStream()) : null

android {
    namespace 'ie.equalit.ceno'

    compileSdkVersion Config.compileSdkVersion

    aaptOptions {
        ignoreAssetsPattern '!._'
        ignoreAssetsPattern 'uBlock0@raymondhill.net.*'
    }

    defaultConfig {
        applicationId "ie.equalit.ceno"
        minSdkVersion Config.minSdkVersion
        compileSdkVersion Config.compileSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode 1
        versionName System.getenv('CENO_VERSION') ?: localProperties['versionName']

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        buildConfigField "String", "CACHE_PUB_KEY", localProperties['CACHE_PUB_KEY']
        buildConfigField "String", "INJECTOR_CREDENTIALS", localProperties['INJECTOR_CREDENTIALS']
        buildConfigField "String", "INJECTOR_TLS_CERT", localProperties['INJECTOR_TLS_CERT']
        buildConfigField "String[][]", "BT_BOOTSTRAP_EXTRAS",  localProperties['BT_BOOTSTRAP_EXTRAS'] ?: '{{"",""}}'
        buildConfigField "String", "PROXY_PORT", localProperties['PROXY_PORT'] ?: "8077"
        buildConfigField "String", "FRONTEND_PORT", localProperties['FRONTEND_PORT'] ?: "8078"

        buildConfigField "java.util.Map<String, String>", "CONFIG_MAP", getConfigMap(scenarioYaml)
        buildConfigField "java.util.List<java.util.Map<String, String>>", "SCENARIO_LIST", getScenarioList(scenarioYaml)
    }

    /* CENO: Add signing config for release builds */
    signingConfigs {
        release {
            def releaseStoreFile = System.getenv('STORE_FILE') ?: localProperties['STORE_FILE']
            storeFile file(releaseStoreFile ?: "$project.rootDir/debug.keystore-passwords")
            storePassword System.getenv('STORE_PASSWORD') ?: localProperties['STORE_PASSWORD']
            keyAlias System.getenv('KEY_ALIAS') ?: localProperties['KEY_ALIAS']
            keyPassword System.getenv('KEY_PASSWORD') ?: localProperties['KEY_PASSWORD']

            enableV1Signing true
            enableV2Signing true
            enableV3Signing true
        }
    }

    def releaseTemplate = {
        minifyEnabled false
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        matchingFallbacks = ['release'] // Use on the "release" build type in dependencies (AARs)
    }

    buildFeatures {
        compose true
        /* CENO: set databinding true, required for building HomeFragment */
        viewBinding true
        buildConfig = true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = libs.versions.google.composecompiler.get()
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        /* CENO: Add release build type, allows automatic signing of apks by gradle */
        release {
            signingConfig signingConfigs.release
            buildConfigField "boolean", "IS_RELEASED", "true"
        }
        beta {
            signingConfig signingConfigs.release
            buildConfigField "boolean", "IS_RELEASED", "true"
        }
        raptor releaseTemplate >> { // the ">>" concatenates the raptor-specific options with the template
            applicationIdSuffix ".raptor"
            manifestPlaceholders.isRaptorEnabled = "true"
            matchingFallbacks = ['release']
        }
        nightly {
            signingConfig signingConfigs.release
            buildConfigField "boolean", "IS_RELEASED", "true"
        }
    }

    /* CENO: Don't ignore release buildType */
    /*
    variantFilter { // There's a "release" build type that exists by default that we don't use (it's replaced by "nightly" and "beta")
        if (buildType.name == 'release') {
            setIgnore true
        }
    }
    */

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
    }

    lint {
        disable 'IconDuplicates', 'MissingTranslation', 'UnusedQuantity', 'GradleDependency'
        lintConfig file("lint.xml")
        baseline file("lint-baseline.xml")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    splits {
        abi {
            enable true

            reset()

            //noinspection ChromeOsAbiSupport
            include "armeabi-v7a", "arm64-v8a", "x86_64"
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        freeCompilerArgs += "-Xjvm-default=all"
        jvmTarget = "17"
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'mergeDebugAssets' ||
            task.name == 'mergeBetaAssets' ||
            task.name == 'mergeReleaseAssets') {
        task.dependsOn renameUblockXpi
        task.dependsOn unzipUblockOrigin
    }
}

def baseBuildDate = generatedBuildDate
def apkDate = generatedApkDate
def appId = android.defaultConfig.applicationId.tokenize('.')

// -------------------------------------------------------------------------------------------------
// Copy and rename AAB - adapted from https://stackoverflow.com/a/54010142
// -------------------------------------------------------------------------------------------------
tasks.whenTaskAdded { task ->
    if (task.name.startsWith("bundle")) {
        def renameTaskName = "rename${task.name.capitalize()}"
        def variantName = task.name.substring("bundle".length()).uncapitalize()
        def versionName = android.defaultConfig.versionName
        tasks.register(renameTaskName, Copy) {
            def path = "${buildDir}/outputs/bundle/${variantName}/"
            from(path)
            include "app-${variantName}.aab"
            destinationDir file("$project.rootDir/output/${variantName}/")
            rename "app-${variantName}.aab", "${appId[2]}-${variantName}-${versionName}-${apkDate}.aab"
        }
        task.finalizedBy renameTaskName
    }
}

android.applicationVariants.all { variant ->

// -------------------------------------------------------------------------------------------------
// Sentry: Read token from local file if it exists (Only release builds)
// -------------------------------------------------------------------------------------------------
    print("Sentry token:  "+ variant.name)
    try {
        def token = new File("${rootDir}/.sentry_token").text.trim()
        buildConfigField 'String', 'SENTRY_TOKEN', '"' + token + '"'
        println "(Added from .sentry_token file)"
    } catch (FileNotFoundException ignored) {
        buildConfigField 'String', 'SENTRY_TOKEN', 'null'
        println(" :( ")
    }

// -------------------------------------------------------------------------------------------------
// Activating crash reports with command line parameter.
// -------------------------------------------------------------------------------------------------
    if (project.hasProperty("crashReportEnabled") && project.property("crashReportEnabled") == "true") {
        buildConfigField 'boolean', 'CRASH_REPORTING_ENABLED', 'true'
    } else {
        buildConfigField 'boolean', 'CRASH_REPORTING_ENABLED', 'false'
    }

// -------------------------------------------------------------------------------------------------
// Activating telemetry  with command line paramter.
// -------------------------------------------------------------------------------------------------

if (project.hasProperty("telemetry") && project.property("telemetry") == "true") {
    buildConfigField 'boolean', 'TELEMETRY_ENABLED', 'true'
} else {
    buildConfigField 'boolean', 'TELEMETRY_ENABLED', 'false'
}

// -------------------------------------------------------------------------------------------------
// Generating version codes for Google Play
// -------------------------------------------------------------------------------------------------
    if (variant.buildType.buildConfigFields['IS_RELEASED']?.value) {
        // The Google Play Store does not allow multiple APKs for the same app that all have the
        // same version code. Therefore we need to have different version codes for our ARM and x86
        // builds.

        // Our x86 builds need a higher version code to avoid installing ARM builds on an x86 device
        // with ARM compatibility mode.

        variant.outputs.each { output ->
            def abi = output.getFilter(OutputFile.ABI)

            /* CENO: Allow generated build date to be overwritten with a hard-coded build date
             */
            def buildDateOverride = (localProperties['buildDate'] ?: baseBuildDate) as Long

            /* CENO: Use mozilla's versionCode generator to be consistent with pre-v2 CENO 
             * python script copied from here, https://hg.mozilla.org/releases/mozilla-release/file/tip/python/mozbuild/mozbuild/android_version_code.py
             * We should periodically check if any changes are made to it.
             */
            def stdout = new ByteArrayOutputStream()
            exec {
                workingDir rootDir.toString() + '/python/'
                commandLine 'python', 'android_version_code.py',
                                '--with-android-cpu-arch', abi,
                                '--with-android-min-sdk-version', Config.minSdkVersion,
                                '--with-android-max-sdk-version', Config.targetSdkVersion,
                                buildDateOverride
                standardOutput = stdout
            }

            /* CENO: For F-Droid allow generated buildId to be overridden with value included in local.properties */
            def versionCodeOverride = (localProperties['buildId'] ?: stdout.toString()) as Long

            println("versionCode for $abi = $versionCodeOverride")

            if (variant.name == "nightly") {
                output.versionNameOverride  = versionName + "-" + baseBuildDate
            }
            else {
                output.versionNameOverride = versionName
            }
            output.versionCodeOverride = versionCodeOverride
        }

        // If this is a release build, validate that "versionName" is set
        tasks.withType(AppPreBuildTask) { prebuildTask ->
            // You can't add a closure to a variant, so we need to look for an early variant-specific type
            // of task (AppPreBuildTask is the first) and filter to make sure we're looking at the task for
            // this variant that we're currently configuring
            if (prebuildTask.variantName != variant.name) {
                return
            }

            // Append to the task so the first thing it does is run our validation
            prebuildTask.doFirst {
                if (!project.hasProperty('versionName')) {
                    throw new RuntimeException("Release builds require the 'versionName' property to be set.\n" +
                            "If you're using an IDE, set your build variant to be a \"debug\" type.\n" +
                            "If you're using the command-line, either build a debug variant instead ('./gradlew assembleDebug')\n" +
                            "\tor continue building the release build and set the \"versionName\" property ('./gradlew -PversionName=<...> assembleNightly').")
                    // TODO when Android Studio 3.5.0 is prevalent, we can set the "debug" build type as the default
                    // https://issuetracker.google.com/issues/36988145#comment59
                }
            }
        }
        def lintVitalAnalyzeTask = tasks.findByName("lintVitalAnalyze${variant.name.capitalize()}")
        if (lintVitalAnalyzeTask) {
            lintVitalAnalyzeTask.dependsOn(unzipUblockOrigin)
        }
        def lintVitalReportModelTask = tasks.findByName("generate${variant.name.capitalize()}LintVitalReportModel")
        if (lintVitalReportModelTask) {
            lintVitalReportModelTask.dependsOn(unzipUblockOrigin)
        }
    }

// -------------------------------------------------------------------------------------------------
// BuildConfig: Set flag for official builds; similar to MOZILLA_OFFICIAL in mozilla-central.
// -------------------------------------------------------------------------------------------------

    if (project.hasProperty("official") || gradle.hasProperty("localProperties.official")) {
        buildConfigField 'Boolean', 'MOZILLA_OFFICIAL', 'true'
    } else {
        buildConfigField 'Boolean', 'MOZILLA_OFFICIAL', 'false'
    }

// -------------------------------------------------------------------------------------------------
// Set the name of the output apks and copy to project directory
// -------------------------------------------------------------------------------------------------
    variant.outputs.all { output ->
        def abi = output.getFilter(OutputFile.ABI)
        def version = output.versionNameOverride
        outputFileName = "${appId[2]}-${abi}-${variant.name}-${version}-${apkDate}.apk"
    }

    variant.assembleProvider.configure { assemble ->
        assemble.doLast {
            copy {
                from variant.outputs*.outputFile
                into "$project.rootDir/output/${variant.name}/"
            }
        }
    }
}

// Select the Glean from GeckoView.
// `service-sync-logins` requires Glean, which pulls in glean-native,
// but that's also provided by geckoview-omni, so now we need to select which one to use.
project.configurations.all {
    resolutionStrategy.capabilitiesResolution.withCapability("org.mozilla.telemetry:glean-native") {
        def toBeSelected = candidates.find { it.id instanceof ModuleComponentIdentifier && it.id.module.contains('geckoview') }
        if (toBeSelected != null) {
            select(toBeSelected)
        }
        because 'use GeckoView Glean instead of standalone Glean'
    }
}

dependencies {
    implementation libs.mozilla.conceptawesomebar
    implementation libs.mozilla.conceptengine
    implementation libs.mozilla.conceptmenu
    implementation libs.mozilla.concepttabstray
    implementation libs.mozilla.concepttoolbar
    implementation libs.mozilla.conceptstorage
    implementation libs.mozilla.conceptsync
    implementation libs.mozilla.conceptpush

    implementation libs.mozilla.composeawesomebar

    implementation libs.mozilla.browserenginegecko
    implementation libs.mozilla.browserdomains
    implementation libs.mozilla.browsertabstray
    implementation libs.mozilla.browsertoolbar
    implementation libs.mozilla.browsermenu
    implementation libs.mozilla.browsermenu2
    implementation libs.mozilla.browsersessionstorage
    implementation libs.mozilla.browserstate
    implementation libs.mozilla.browserstoragesync
    implementation libs.mozilla.browsericons
    implementation libs.mozilla.browserthumbnails

    implementation libs.mozilla.featureaccounts
    implementation libs.mozilla.featureaccountspush
    implementation libs.mozilla.featureaddons
    implementation libs.mozilla.featureapplinks
    implementation libs.mozilla.featureawesomebar
    implementation libs.mozilla.featureautofill
    implementation libs.mozilla.featurecontextmenu
    implementation libs.mozilla.featurecustomtabs
    implementation libs.mozilla.featurefindinpage
    implementation libs.mozilla.featuremedia
    implementation libs.mozilla.featuresitepermissions
    implementation libs.mozilla.featureintent
    implementation libs.mozilla.featuresearch
    implementation libs.mozilla.featuresession
    implementation libs.mozilla.featuretoolbar
    implementation libs.mozilla.featuretabs
    implementation libs.mozilla.featuredownloads
    implementation libs.mozilla.featureprompts
    implementation libs.mozilla.featurepush
    implementation libs.mozilla.featurepwa
    implementation libs.mozilla.featureqr
    implementation libs.mozilla.featurereaderview
    implementation libs.mozilla.featuresyncedtabs
    implementation libs.mozilla.featurewebauthn
    implementation libs.mozilla.featurewebcompat
    implementation libs.mozilla.featurewebnotifications
    implementation libs.mozilla.featureshare

    implementation libs.mozilla.uiautocomplete
    implementation libs.mozilla.uicolors
    implementation libs.mozilla.uiicons
    implementation libs.mozilla.uitabcounter

    implementation libs.mozilla.servicefirefoxaccounts
    implementation libs.mozilla.servicelocation
    implementation libs.mozilla.servicesynclogins

    implementation libs.mozilla.supportimages
    implementation libs.mozilla.supportutils
    implementation libs.mozilla.supportktx
    implementation libs.mozilla.supportrustlog
    implementation libs.mozilla.supportrusthttp
    implementation libs.mozilla.supportwebextensions

    implementation libs.mozilla.libpublicsuffixlist
    implementation libs.mozilla.libdataprotect

    implementation libs.thirdparty.sentry
    implementation libs.thirdparty.gson

    implementation libs.kotlin.coroutines
    implementation libs.kotlin.serialization

    implementation libs.androidx.appcompat
    implementation libs.androidx.corektx
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.lifecycleprocess
    implementation libs.androidx.preferencektx
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.workruntimektx

    implementation libs.androidx.activitycompose
    implementation libs.androidx.composeui
    implementation libs.androidx.composeuitooling
    implementation libs.androidx.composefoundation
    implementation libs.androidx.composematerial
    implementation libs.androidx.navigationfragment
    implementation libs.androidx.navigationui

    implementation libs.google.material

    /* CENO: Begin implement additional dependencies */
    implementation libs.mozilla.featuretopsites
    implementation libs.mozilla.uiwidgets

    if (gradle.hasProperty('localProperties.dependencySubstitutions.ouinetLocalLib')) {
        project.logger.lifecycle('Subtituting local AAR for Ouinet dependency')
        implementation(files(gradle."localProperties.dependencySubstitutions.ouinetLocalLib"))
    } else {
        implementation libs.ouinet.omni
    }
    implementation libs.relinker
    /* CENO: End implement additional dependencies */

    androidTestImplementation libs.uiautomator
    androidTestImplementation libs.junit.ktx

    androidTestImplementation libs.espresso.core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation(libs.espresso.contrib) {
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
        exclude module: 'espresso-core'
    }

    androidTestImplementation libs.espresso.idlingresources
    androidTestImplementation libs.espresso.web, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation libs.mockwebserver
    androidTestImplementation libs.tools.testrunner
    androidTestImplementation libs.tools.testrules
    androidTestUtil libs.orchestrator
    androidTestImplementation libs.espresso.core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

task renameUblockXpi (type: Copy) {
    from ('src/main/assets/addons/')
    include 'uBlock0@raymondhill.net.xpi'
    destinationDir file('src/main/assets/addons/')
    rename { 'uBlock0@raymondhill.net.zip' }
}

task unzipUblockOrigin(type: Copy) {
    dependsOn(renameUblockXpi)
    def zipFile = file("src/main/assets/addons/uBlock0@raymondhill.net.zip")
    def outputDir = file("src/main/assets/addons/uBlock")
    from zipTree(zipFile)
    into outputDir
}

// -------------------------------------------------------------------------------------------------
// Task for printing APK information for the requested variant
// Usage: ./gradlew printVariants
// -------------------------------------------------------------------------------------------------
task printVariants {
    doLast {
        def variants = android.applicationVariants.collect { variant -> [
                apks: variant.outputs.collect { output -> [
                        abi: output.getFilter(com.android.build.VariantOutput.FilterType.ABI),
                        fileName: output.outputFile.name
                ]},
                build_type: variant.buildType.name,
                name: variant.name,
        ]}
        println 'variants: ' + groovy.json.JsonOutput.toJson(variants)
    }
}

task printGeckoviewVersion {
    doLast {
        def configuration = configurations.implementationDependenciesMetadata
        def dependencies = configuration.incoming.resolutionResult.allDependencies
        def geckoviewDependency = dependencies.find { it.selected.id.moduleIdentifier.group == 'org.mozilla.geckoview' }
        println('geckoviewVersion: ' + groovy.json.JsonOutput.toJson(geckoviewDependency.selected.moduleVersion.version))
    }
}

static def getScenarioList(o) {
    def scenarioList = "new java.util.ArrayList<java.util.Map<String, String>>() {{"
    if (o != null) {
        for (s in o.scenarios) {
            scenarioList += "add(new java.util.HashMap<String, String>() {" +
                    "{" +
                    "put(\"website\", \"${s.website}\");" +
                    "put(\"expextedText\", \"${s.expectedText}\");" +
                    "}" +
                    "}); "
        }
    } else {
        scenarioList += "add(new java.util.HashMap<String, String>() {" +
                "{" +
                "put(\"website\", \"https://example.com\");" +
                "}" +
                "}); "
    }
    scenarioList += "}}"
    return scenarioList
}

static def getConfigMap(o) {
    def configMap = " new java.util.HashMap<String, String>() {"
    if (o != null) {
        configMap +=
                "{" +
                        "put(\"website\", \"${o.config.website}\");" +
                        "put(\"private\", \"${o.config.private}\");" +
                        "put(\"public\", \"${o.config.public}\");" +
                        "put(\"shared\", \"${o.config.shared}\");" +
                        "put(\"personalTab\", \"${o.config.personalTab}\");" +
                        "}"
    } else {
        configMap +=
                "{" +
                        "put(\"website\", \"false\");" +
                        "put(\"private\", \"true\");" +
                        "put(\"public\", \"true\");" +
                        "put(\"shared\", \"true\");" +
                        "put(\"personalTab\", \"false\");" +
                        "}"
    }
    configMap += "}"
    return configMap
}

if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopsrcdir')) {
    if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopobjdir')) {
        ext.topobjdir = gradle."localProperties.dependencySubstitutions.geckoviewTopobjdir"
    }
    ext.topsrcdir = gradle."localProperties.dependencySubstitutions.geckoviewTopsrcdir"
    apply from: "${topsrcdir}/substitute-local-geckoview.gradle"
}

if (gradle.hasProperty('localProperties.autoPublish.android-components.dir')) {
    ext.acSrcDir = gradle."localProperties.autoPublish.android-components.dir"
    apply from: "../${acSrcDir}/substitute-local-ac.gradle"
}

if (gradle.hasProperty('localProperties.autoPublish.application-services.dir')) {
    ext.appServicesSrcDir = gradle."localProperties.autoPublish.application-services.dir"
    apply from: "../${appServicesSrcDir}/build-scripts/substitute-local-appservices.gradle"
}

clean {
  delete 'build', 'target', fileTree("$project.rootDir/output/") { include '**/*.apk' }
}
