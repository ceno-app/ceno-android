# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

  desc "Clean build directory and re-build debug and test apks"
  lane :cleanAssembleDebugTest do
    gradle(
      task: 'clean'
    )
    gradle(
      task: 'assemble',
      build_type: 'Debug'
    )
    gradle(
      task: 'assemble',
      build_type: 'AndroidTest'
    )
  end

  desc "Build debug and test apks"
  lane :assembleDebugTest do
    gradle(
      task: 'assemble',
      build_type: 'Debug'
    )
    gradle(
      task: 'assemble',
      build_type: 'AndroidTest'
    )
  end

  desc "Run gradle lintDebug"
  lane :lint do
    gradle(
      task: 'lint',
      build_type: 'Debug'
    )
  end

  desc "Clean build directory and re-build nightly apks and bundle"
  lane :cleanAssembleNightly do
    gradle(
      task: 'clean'
    )
    gradle(
      task: 'assemble',
      build_type: 'Nightly'
    )
    gradle(
      task: 'bundle',
      build_type: 'Nightly'
    )
  end

  desc "Clean build directory and re-build nightly apks and bundle"
  lane :cleanAssembleRelease do
    gradle(
      task: 'clean'
    )
    gradle(
      task: 'assemble',
      build_type: 'Release'
    )
    gradle(
      task: 'bundle',
      build_type: 'Release'
    )
  end

  desc "Create release notes from CHANGELOG.txt to ${VERSION_CODE}.txt for nightly release"
  lane :createNightlyNotes do
    ENV["LOCAL_VERSION"] = sh " cat ../local.properties \
                                    | grep versionName \
                                    | cut -d '=' -f2"
    ENV["VERSION_NAME"] = sh "echo $([ -z $CENO_VERSION ] && echo $LOCAL_VERSION || echo $CENO_VERSION) | tr -d '\n'"
    ENV["VERSION_CODE"]  = sh "java -jar /opt/bundletool-all-1.17.1.jar dump manifest \
                                --bundle ../app/build/outputs/bundle/nightly/app-nightly.aab \
                                --xpath /manifest/@android:versionCode \
                                | tr -d '\n'"
    sh "sed -n \"/${VERSION_NAME}/,/#/p\" metadata/android/en-US/changelogs/CHANGELOG.txt \
        | head -n -2 \
        | tail -n +2 \
        > metadata/android/en-US/changelogs/${VERSION_CODE}.txt"
  end

  desc "Create and copy release notes from CHANGELOG.txt to ${VERSION_CODE}.txt for production release"
  lane :createReleaseNotes do
    ENV["LOCAL_VERSION"] = sh " cat ../local.properties \
                                    | grep versionName \
                                    | cut -d '=' -f2"
    ENV["VERSION_NAME"] = sh "echo $([ -z $CENO_VERSION ] && echo $LOCAL_VERSION || echo $CENO_VERSION) | tr -d '\n'"
    ENV["VERSION_CODE"]  = sh "java -jar /opt/bundletool-all-1.17.1.jar dump manifest \
                                --bundle ../app/build/outputs/bundle/release/app-release.aab \
                                --xpath /manifest/@android:versionCode \
                                | tr -d '\n'"
    sh "sed -n \"/${VERSION_NAME}/,/#/p\" metadata/android/en-US/changelogs/CHANGELOG.txt \
        | head -n -2 \
        | tail -n +2 \
        > metadata/android/en-US/changelogs/${VERSION_CODE}.txt"
    # 32-bit F-droid release version code
    sh "cp metadata/android/en-US/changelogs/${VERSION_CODE}.txt metadata/android/en-US/changelogs/$((VERSION_CODE-1)).txt"
    # 64-bit F-droid release version code
    sh "cp metadata/android/en-US/changelogs/${VERSION_CODE}.txt metadata/android/en-US/changelogs/$((VERSION_CODE+1)).txt"
    # 64-bit play store release version code
    sh "cp metadata/android/en-US/changelogs/${VERSION_CODE}.txt metadata/android/en-US/changelogs/$((VERSION_CODE+2)).txt"
  end

  desc "Clean up repo after changes required for play store upload"
  lane :cleanRepo do
      sh "git restore ."
      sh "git clean -f"
      sh "git clean -fd"
  end

  lane :screenshots do |options|
    if options[:abi] == "" then
        apk_path = './app/build/outputs/apk/debug/app-arm64-v8a-debug.apk'
    else
        apk_path = './app/build/outputs/apk/debug/app-' + options[:abi] + '-debug.apk'
    end
    capture_android_screenshots(
        app_apk_path: apk_path
    )
  end

  desc "Run tasks if new commits have been made to develop"
  lane :nightly do
    previous_commit = last_git_commit[:commit_hash]
    sh "git pull origin develop"
    current_commit = last_git_commit[:commit_hash]
    if current_commit != previous_commit then
      cleanAssembleDebugTest
      lint
      # Uploads debug apk to BrowserStack and starts tests
      sh "../start_testsuite.sh -u"

      # Make nightly builds and upload to Play Store internal test track
      cleanAssembleNightly
      createNightlyNotes
      # Rename pt to pt-PT, pt is created by weblate, but only pt-PT is supported by play store
      sh "mv metadata/android/pt metadata/android/pt-PT"
      upload_to_play_store(
        track: 'internal',
        release_status: 'draft',
        skip_upload_apk: 'true',
        skip_upload_metadata: 'true',
        skip_upload_changelogs: 'false',
        skip_upload_images: 'true',
        skip_upload_screenshots: 'true',
      )

      # Run localTests on all connected devices
      #adb_devices.each do |device|
      #  model = adb(command: "shell getprop ro.product.model",
      #    serial: device.serial).strip
      #  puts "Running test on #{model}"
      #  ENV['ANDROID_SERIAL'] = device.serial
      #  gradle(
      #    task: 'connectedDebugAndroidTest'
      #  )
      #end

      cleanRepo
    end
  end

  desc "Prepare release APKS, AAB, and release notes"
  lane :prepareRelease do
      lint
      cleanAssembleRelease
      createReleaseNotes
  end

  desc "Publish metadata to Play Store"
  lane :publishMetadata do
    # Temporarily rename pt to pt-PT, only pt-PT is supported by play store
    sh "mv metadata/android/pt metadata/android/pt-PT"
    upload_to_play_store(
      skip_upload_apk: 'true',
      skip_upload_aab: 'true',
      skip_upload_metadata: 'false',
      skip_upload_changelogs: 'true',
      skip_upload_images: 'true',
      skip_upload_screenshots: 'true',
    )
    sh "mv metadata/android/pt-PT metadata/android/pt"
  end
end
